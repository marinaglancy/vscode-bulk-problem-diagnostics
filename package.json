{
  "name": "bulk-problem-diagnostics",
  "displayName": "Bulk Problem Diagnostics",
  "description": "Opens all files in a folder and all subfolders in order to review problems. Splits large number of files in batches to prevent unloading.",
  "version": "1.0.3",
  "publisher": "MarinaGlancy",
  "repository": {
    "type": "git",
    "url": "https://github.com/marinaglancy/vscode-bulk-problem-diagnostics"
  },
  "engines": {
    "vscode": "^1.75.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "bulk-problem-diagnostics.openAllFiles",
        "title": "Open all files with problems"
      },
      {
        "command": "bulk-problem-diagnostics.openAllFilesContinue",
        "title": "Open all files with problems (continue)"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "bulk-problem-diagnostics.openAllFiles",
          "when": "explorerResourceIsFolder",
          "group": "explorerResourceIsFolder@1"
        },
        {
          "command": "bulk-problem-diagnostics.openAllFilesContinue",
          "when": "explorerResourceIsFolder && resourcePath in bulkProblemDiagnostics.lastFolder",
          "group": "explorerResourceIsFolder@2"
        }
      ],
      "commandPalette": [
        {
          "command": "bulk-problem-diagnostics.openAllFilesContinue",
          "when": "bulkProblemDiagnostics.hasLastFolder"
        }
      ]
    },
    "keybindings": [
      {
        "command": "bulk-problem-diagnostics.openAllFilesContinue",
        "key": "ctrl+shift+alt+o",
        "mac": "cmd+shift+alt+o",
        "when": "bulkProblemDiagnostics.hasLastFolder"
      }
    ],
    "configuration": {
      "id": "bulk-problem-diagnostics",
      "title": "Bulk Problem Diagnostics",
      "properties": {
        "bulkProblemDiagnostics.filesLimit": {
          "default": 200,
          "description": "Maximum number of files to analyse in one operation. If the folder has more files, the next command execution will start from where it finished last time.",
          "type": "number"
        },
        "bulkProblemDiagnostics.openFiles": {
          "default": "**",
          "description": "Files to analyse. Examples: '**' - all files, '**/*.{php,js}' - only PHP and JS files",
          "type": "string"
        },
        "bulkProblemDiagnostics.excludeFiles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**/.git/**",
            "**/.svn/**",
            "**/.hg/**",
            "**/CVS/**",
            "**/.DS_Store/**",
            "**/node_modules/**",
            "**/bower_components/**",
            "**/vendor/**",
            "**/.history/**"
          ],
          "description": "Configure glob patterns to exclude certain files and folders from analysing. Relative paths are calculated from the workspace root (not the folder being analysed)."
        },
        "bulkProblemDiagnostics.autoExcludeFrameworkSuggestions": {
          "default": true,
          "description": "Automatically detect other files to exclude for some common projects or frameworks",
          "type": "boolean"
        },
        "bulkProblemDiagnostics.delay": {
          "default": 100,
          "description": "Delay (in ms) between analysing files to allow diagnostics to catch up with the newly loaded files",
          "type": "number"
        },
        "bulkProblemDiagnostics.maxSeverityLevel": {
          "default": 2,
          "description": "Maximum problem severity level, file will only be open if it contains problems of this or lower levels (1 - errors, 2 - warnings, 3 - notices)",
          "type": "number"
        },
        "bulkProblemDiagnostics.errorMessageMatch": {
          "default": "",
          "description": "If specified, will only open files that have problems that match this setting",
          "type": "string"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.75.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.2.0",
    "eslint": "^8.28.0",
    "mocha": "^10.1.0",
    "typescript": "^4.9.3"
  },
  "dependencies": {
    "fast-xml-parser": "^4.1.2"
  }
}
